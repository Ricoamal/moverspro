version: '3.8'

services:
  # MoveEase Pro Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: moveease-pro-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=moveease_pro
      - DB_USER=moveease
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3001}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
      - backups:/app/backups
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - moveease-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.moveease.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.moveease.tls=true"
      - "traefik.http.routers.moveease.tls.certresolver=letsencrypt"

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: moveease-pro-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=moveease_pro
      - MYSQL_USER=moveease
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - moveease-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: moveease-pro-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5
    networks:
      - moveease-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: moveease-pro-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - moveease-network

  # Traefik Load Balancer (Alternative to Nginx)
  traefik:
    image: traefik:v2.10
    container_name: moveease-pro-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - moveease-network
    profiles:
      - traefik

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: moveease-pro-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - moveease-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: moveease-pro-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - moveease-network
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: alpine:latest
    container_name: moveease-pro-backup
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=moveease
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=moveease_pro
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - backups:/backups
      - uploads:/app/uploads:ro
      - ./scripts/backup.sh:/backup.sh:ro
    command: sh -c "apk add --no-cache mysql-client aws-cli && crond -f"
    depends_on:
      - mysql
    networks:
      - moveease-network
    profiles:
      - backup

# Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local
  backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_acme:
    driver: local

# Networks
networks:
  moveease-network:
    driver: bridge
